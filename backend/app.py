import os
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import matplotlib
matplotlib.use('Agg')  # –±–µ–∫–µ–Ω–¥ –±–µ–∑ GUI
import matplotlib.pyplot as plt

from flatlib.chart import Chart
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import pytz
from datetime import datetime as dt

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
STATIC_FOLDER = 'static'
os.makedirs(STATIC_FOLDER, exist_ok=True)

app = Flask(__name__, static_folder=STATIC_FOLDER)
CORS(app)


@app.route('/')
def index():
    return "üîÆ Astro API –ø—Ä–∞—Ü—é—î! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /generate –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏."


@app.route('/generate', methods=['POST'])
def generate_chart():
    data = request.json or {}
    date = data.get('date')
    time = data.get('time')
    place = data.get('place')

    if not (date and time and place):
        return jsonify({
            'chart_image_url': None,
            'status': 'error',
            'error': '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, —á–∞—Å —Ç–∞ –º—ñ—Å—Ü–µ'
        }), 400

    chart_path = os.path.join(STATIC_FOLDER, 'chart.png')
    status = "ok"
    error_msg = None

    try:
        # --- –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è ---
        geolocator = Nominatim(user_agent="astro_app")
        location = geolocator.geocode(place, timeout=10)
        if not location:
            raise ValueError("–ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        lat, lon = location.latitude, location.longitude

        # --- –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å ---
        tf = TimezoneFinder()
        tz_name = tf.timezone_at(lng=lon, lat=lat) or "UTC"
        tz = pytz.timezone(tz_name)

        # --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ –π —á–∞—Å—É ---
        dt_obj = dt.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        local_dt = tz.localize(dt_obj)
        utc_dt = local_dt.astimezone(pytz.utc)

        fdate = utc_dt.strftime("%Y/%m/%d")
        ftime = utc_dt.strftime("%H:%M")
        pos = GeoPos(lat, lon)

               # --- –ü–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏ ---
        chart = Chart(Datetime(fdate, ftime, "+00:00"), pos)

        fig, ax = plt.subplots(figsize=(6, 6))
        ax.set_title(f"–ù–∞—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∞: {place}", fontsize=14)

        for obj in chart.objects:
            planet = chart.get(obj)   # <-- –∫–ª—é—á–æ–≤–∞ –∑–º—ñ–Ω–∞
            ax.plot([0], [0], 'o', label=f"{obj} {planet.lon:.2f}¬∞")

        ax.legend(fontsize=8, loc='upper left')
        plt.tight_layout()
        plt.savefig(chart_path)
        plt.close(fig)

    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∏:", e)
        status = "stub"
        error_msg = str(e)
        # --- fallback-–∑–∞–≥–ª—É—à–∫–∞ ---
        fig, ax = plt.subplots(figsize=(6, 6))
        ax.text(
            0.5, 0.5,
            f"–ù–∞—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∞\n{place}\n(–∑–∞–≥–ª—É—à–∫–∞)",
            ha='center', va='center', fontsize=14
        )
        plt.axis("off")
        plt.savefig(chart_path)
        plt.close(fig)

    return jsonify({
        'chart_image_url': f'/static/chart.png',
        'status': status,
        'error': error_msg
    })


@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory(STATIC_FOLDER, filename)

# Healthcheck –¥–ª—è Fly
@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "ok"}), 200

if __name__ == '__main__':
    # Fly.io –≤–∏–º–∞–≥–∞—î PORT –∑ env
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)