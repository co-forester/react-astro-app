import os
import math
from datetime import datetime as dt

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS

import matplotlib
matplotlib.use("Agg")  # headless —Ä–µ–Ω–¥–µ—Ä
import matplotlib.pyplot as plt

from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import pytz

from flatlib.chart import Chart
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib import const

# ===================== –ö–æ–Ω—Ñ—ñ–≥ =====================
STATIC_FOLDER = 'static'
os.makedirs(STATIC_FOLDER, exist_ok=True)

app = Flask(__name__, static_folder=STATIC_FOLDER)
CORS(app)

geolocator = Nominatim(user_agent="astro_app")
tf = TimezoneFinder()

# ----- –ì–ª—ñ—Ñ–∏ –ø–ª–∞–Ω–µ—Ç —Ç–∞ –∑–Ω–∞–∫—ñ–≤ (Unicode) -----
PLANET_SYMBOLS = {
    const.SUN:     '‚òâ',
    const.MOON:    '‚òΩ',
    const.MERCURY: '‚òø',
    const.VENUS:   '‚ôÄ',
    const.MARS:    '‚ôÇ',
    const.JUPITER: '‚ôÉ',
    const.SATURN:  '‚ôÑ',
    const.URANUS:  '‚ôÖ',
    const.NEPTUNE: '‚ôÜ',
    const.PLUTO:   '‚ôá',
    # –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ—á–∫–∏ (–º–∞–ª—é—î–º–æ —è–∫ –≥–ª—ñ—Ñ–∏)
    const.ASC:     '‚Üë',   # Ascendant
    const.MC:      '‚öù',   # Midheaven (–∞–ª—å—Ç. —Å–∏–º–≤–æ–ª)
}

ZODIAC_SIGNS = ['‚ôàÔ∏é','‚ôâÔ∏é','‚ôäÔ∏é','‚ôãÔ∏é','‚ôåÔ∏é','‚ôçÔ∏é','‚ôéÔ∏é','‚ôèÔ∏é','‚ôêÔ∏é','‚ôëÔ∏é','‚ôíÔ∏é','‚ôìÔ∏é']

# ----- –ê—Å–ø–µ–∫—Ç–∏, –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ –æ—Ä–±—ñ—Å–∏ -----
ASPECTS = {
    'conjunction': {'angle': 0,   'orb': 8, 'color': 'black'},
    'sextile':     {'angle': 60,  'orb': 5, 'color': 'green'},
    'square':      {'angle': 90,  'orb': 6, 'color': 'red'},
    'trine':       {'angle': 120, 'orb': 7, 'color': 'blue'},
    'opposition':  {'angle': 180, 'orb': 8, 'color': 'red'},
}

# ===================== –•–µ–ª–ø–µ—Ä–∏ =====================
def norm_angle(a):
    a = a % 360.0
    return a if a >= 0 else a + 360.0

def ang_dist(a, b):
    d = abs(norm_angle(a) - norm_angle(b))
    return d if d <= 180 else 360 - d

def deg_to_xy(deg, r):
    """ 0¬∞ –Ω–∞ –ø—Ä–∞–≤–æ–º—É –±–æ—Ü—ñ –∫–æ–ª–∞, –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ç–∏ –≥–æ–¥. —Å—Ç—Ä—ñ–ª–∫–∏ (–∫–ª–∞—Å–∏—á–Ω–∏–π –≤–∏–≥–ª—è–¥).
        –ï–∫—Ä–∞–Ω–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: x=cos, y=sin.
    """
    rad = math.radians(0 - deg)  # —ñ–Ω–≤–µ—Ä—Ç—É—î–º–æ, —â–æ–± –¥–æ–≤–∫–æ–ª–∞ –π—à–ª–æ CCW –∑ Aries –ø—Ä–∞–≤–æ—Ä—É—á
    return r * math.cos(rad), r * math.sin(rad)

def aspect_line_width(orb, max_orb):
    # —Ç–æ–≤—Å—Ç—ñ—à–∞ –ª—ñ–Ω—ñ—è –¥–ª—è —Ç–æ—á–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤
    return max(0.8, 2.8 - (orb / max_orb) * 2.0)

# ===================== –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–∏ =====================
def draw_natal_chart(chart, place, filename="chart.png"):
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–ª–∞
    R_OUTER = 1.00   # –∑–æ–≤–Ω—ñ—à–Ω—î –∫–æ–ª–æ (–∑–Ω–∞–∫–∏)
    R_SIGNS = 0.92   # —Ä–∞–¥—ñ—É—Å –ø—ñ–¥–ø–∏—Å—ñ–≤ –∑–Ω–∞–∫—ñ–≤
    R_HOUSES = 0.80  # –∫–æ–ª–æ –¥–æ–º—ñ–≤ (–ª—ñ–Ω—ñ—ó)
    R_PLANETS = 0.74 # –æ—Ä–±—ñ—Ç–∞ –ø–ª–∞–Ω–µ—Ç (—Ç–æ—á–∫–∏)
    R_ASPECTS = 0.72 # –¥–ª—è –ª—ñ–Ω—ñ–π –∞—Å–ø–µ–∫—Ç—ñ–≤ (–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ)
    R_LOGO = 0.35    # –∫–æ–ª–æ –ª–æ–≥–æ—Ç–∏–ø—É

    plt.rcParams['font.family'] = 'DejaVu Sans'  # –º–∞—î –≥–ª—ñ—Ñ–∏ –∑–Ω–∞–∫—ñ–≤/–ø–ª–∞–Ω–µ—Ç
    fig, ax = plt.subplots(figsize=(8, 8), dpi=160)
    ax.set_xlim(-1.1, 1.1)
    ax.set_ylim(-1.1, 1.1)
    ax.axis('off')

    # --- –ö—ñ–ª—å—Ü—è
    # –ó–æ–≤–Ω—ñ—à–Ω—î –∫–æ–ª–æ (–∑–Ω–∞–∫–∏)
    outer = plt.Circle((0, 0), R_OUTER, fill=False, linewidth=2.0)
    ax.add_artist(outer)
    # –ö–æ–ª–æ –¥–æ–º—ñ–≤
    houses_circle = plt.Circle((0,0), R_HOUSES, fill=False, linewidth=1.2, linestyle='-')
    ax.add_artist(houses_circle)
    # –í–Ω—É—Ç—Ä—ñ—à–Ω—î –∫–æ–ª–æ –¥–ª—è –∞—Å–ø–µ–∫—Ç—ñ–≤
    inner = plt.Circle((0, 0), R_ASPECTS, fill=False, linewidth=1.0, linestyle=':')
    ax.add_artist(inner)

    # --- –ó–Ω–∞–∫–∏ –∑–æ–¥—ñ–∞–∫—É (–∫–æ–∂–Ω—ñ 30¬∞)
    for i, sign in enumerate(ZODIAC_SIGNS):
        start_deg = i * 30.0
        # —Ä–∞–¥—ñ–∞–ª—å–Ω–∞ —Ä–∏—Å–∫–∞ –Ω–∞ –º–µ–∂—ñ –∑–Ω–∞–∫—É
        x1, y1 = deg_to_xy(start_deg, R_OUTER)
        x2, y2 = deg_to_xy(start_deg, R_HOUSES + 0.02)
        ax.plot([x1, x2], [y1, y2], linewidth=1.0, color="#999999")
        # –ø—ñ–¥–ø–∏—Å –∑–Ω–∞–∫—É –≤ —Ü–µ–Ω—Ç—Ä—ñ —Å–µ–∫—Ç–æ—Ä–∞
        mid = start_deg + 15.0
        tx, ty = deg_to_xy(mid, R_SIGNS)
        ax.text(tx, ty, sign, ha='center', va='center', fontsize=14)

        # –¥—Ä—ñ–±–Ω–∞ —Ä–æ–∑–º—ñ—Ç–∫–∞ –∫–æ–∂–Ω—ñ 5¬∞
        for j in range(1, 6):
            mdeg = start_deg + j * 5
            mx1, my1 = deg_to_xy(mdeg, R_OUTER)
            mx2, my2 = deg_to_xy(mdeg, R_OUTER - (0.015 if j != 6 else 0.03))
            ax.plot([mx1, mx2], [my1, my2], linewidth=0.6, color="#CCCCCC")

    # --- –î–æ–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (–ª—ñ–Ω—ñ—ó –¥–æ–º—ñ–≤)
    try:
        # 12 –ª—ñ–Ω—ñ–π –¥–æ–º—ñ–≤ –∑–∞ –ø–ª–æ—Å–∫–∏–¥–æ–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É flatlib Chart)
        house_lines = []
        for h in range(1, 13):
            cusp = chart.houses.get(h).lon  # –≥—Ä–∞–¥—É—Å–∏ –µ–∫–ª—ñ–ø—Ç–∏–∫–∏
            xh1, yh1 = deg_to_xy(cusp, R_HOUSES)
            xh2, yh2 = deg_to_xy(cusp, R_OUTER)
            ax.plot([xh1, xh2], [yh1, yh2], linewidth=1.0, color="#666666")
            house_lines.append(cusp)

        # –ø—ñ–¥–ø–∏—Å–∏ –Ω–æ–º–µ—Ä—ñ–≤ –¥–æ–º—ñ–≤ –±–ª–∏–∂—á–µ –¥–æ —Ü–µ–Ω—Ç—Ä—É
        for h in range(1, 13):
            mid = norm_angle((house_lines[h-1] + house_lines[h-2]) / 2.0) if h > 1 else \
                  norm_angle((house_lines[h-1] + house_lines[11]) / 2.0)
            tx, ty = deg_to_xy(mid, R_HOUSES - 0.05)
            ax.text(tx, ty, str(h), ha='center', va='center', fontsize=10, color="#666666")
    except Exception:
        # –±–µ–∑ –¥–æ–º—ñ–≤ ‚Äî –æ–∫, –Ω–µ –≤–∞–ª–∏–º–æ —Ä–µ–Ω–¥–µ—Ä
        pass

    # --- –ü–æ–∑–∏—Ü—ñ—ó –ø–ª–∞–Ω–µ—Ç + ASC/MC
    objects = [
        const.SUN, const.MOON, const.MERCURY, const.VENUS, const.MARS,
        const.JUPITER, const.SATURN, const.URANUS, const.NEPTUNE, const.PLUTO,
        const.ASC, const.MC
    ]

    planet_positions = {}  # id -> lon
    for obj in objects:
        try:
            body = chart.get(obj)
            lon = float(body.lon)
            planet_positions[obj] = lon
        except Exception:
            continue

    # --- –ü–ª–∞–Ω–µ—Ç–∏ (—Ç–æ—á–∫–∏ + –≥–ª—ñ—Ñ–∏)
    for obj, lon in planet_positions.items():
        x, y = deg_to_xy(lon, R_PLANETS)
        ax.plot(x, y, marker='o', markersize=8, color="#222222")
        glyph = PLANET_SYMBOLS.get(obj, '?')
        ax.text(x, y, glyph, ha='center', va='center', fontsize=13, color="#111111")

    # --- –ê—Å–ø–µ–∫—Ç–∏ (–º—ñ–∂ –ø–ª–∞–Ω–µ—Ç–∞–º–∏; ASC/MC –Ω–µ –∑‚Äô—î–¥–Ω—É—î–º–æ)
    planet_only = [const.SUN, const.MOON, const.MERCURY, const.VENUS, const.MARS,
                   const.JUPITER, const.SATURN, const.URANUS, const.NEPTUNE, const.PLUTO]
    for i in range(len(planet_only)):
        a_id = planet_only[i]
        if a_id not in planet_positions:
            continue
        a_lon = planet_positions[a_id]
        ax_a, ay_a = deg_to_xy(a_lon, R_ASPECTS)
        for j in range(i + 1, len(planet_only)):
            b_id = planet_only[j]
            if b_id not in planet_positions:
                continue
            b_lon = planet_positions[b_id]
            d = ang_dist(a_lon, b_lon)
            # —à—É–∫–∞—î–º–æ, —á–∏ –≤–∫–ª–∞–¥–∞—î—Ç—å—Å—è —É –±—É–¥—å-—è–∫–∏–π –∞—Å–ø–µ–∫—Ç –∑ –æ—Ä–±—ñ—Å–æ–º
            for asp_name, props in ASPECTS.items():
                angle = props['angle']
                orb = props['orb']
                delta = abs(d - angle)
                if delta <= orb:
                    # —á–∏–º —Ç–æ—á–Ω—ñ—à–∏–π –∞—Å–ø–µ–∫—Ç, —Ç–∏–º —Ç–æ–≤—â–∞ –ª—ñ–Ω—ñ—è
                    lw = aspect_line_width(delta, orb)
                    color = props['color']
                    ax_b, ay_b = deg_to_xy(b_lon, R_ASPECTS)
                    ax.plot([ax_a, ax_b], [ay_a, ay_b], color=color, linewidth=lw, alpha=0.9)
                    break  # –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç –Ω–∞ –ø–∞—Ä—É

    # --- –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞ (–ø–ª–∞–Ω–µ—Ç–∏ + –¥–æ–≤–≥–æ—Ç–∏)
    try:
        legend_items = []
        for obj in planet_only:
            if obj in planet_positions:
                glyph = PLANET_SYMBOLS.get(obj, '?')
                val = planet_positions[obj]
                sign_ix = int(norm_angle(val) // 30)
                deg_in_sign = norm_angle(val) % 30
                legend_items.append(f"{glyph}  {deg_in_sign:05.2f}¬∞  {ZODIAC_SIGNS[sign_ix]}")
        # –í–∏–≤—ñ–¥ –ª–µ–≥–µ–Ω–¥–∏ —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –±–ª–æ—Ü—ñ
        if legend_items:
            txt = "\n".join(legend_items)
            ax.text(1.12, 0.0, txt, transform=ax.transData,
                    fontsize=10, va='center', ha='left', color="#222222")
    except Exception:
        pass

    # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –ø—ñ–¥–ø–∏—Å –º—ñ—Å—Ü—è
    ax.text(0, 1.06, f"–ù–∞—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äî {place}", ha='center', va='center',
            fontsize=14, fontweight='bold')

    # --- –õ–æ–≥–æ—Ç–∏–ø —É—Å–µ—Ä–µ–¥–∏–Ω—ñ
    ax.text(0, -R_LOGO, "Albireo Daria", ha='center', va='center',
            fontsize=12, color="#444444", style='italic')

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    out_path = os.path.join(STATIC_FOLDER, filename)
    fig.savefig(out_path, bbox_inches='tight', pad_inches=0.15)
    plt.close(fig)
    return out_path

# ===================== Flask routes =====================
@app.route('/')
def index():
    return "üîÆ Astro API –ø—Ä–∞—Ü—é—î! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /generate –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏."

@app.route('/generate', methods=['POST'])
def generate():
    data = request.json or {}
    date = data.get('date')
    time = data.get('time')
    place = data.get('place')

    if not (date and time and place):
        return jsonify({
            'chart_image_url': None,
            'status': 'error',
            'error': '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, —á–∞—Å —Ç–∞ –º—ñ—Å—Ü–µ'
        }), 400

    chart_path = os.path.join(STATIC_FOLDER, 'chart.png')
    status = "ok"
    error_msg = None

    try:
        # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        location = geolocator.geocode(place, timeout=10)
        if not location:
            raise ValueError(f"–ú—ñ—Å—Ç–æ '{place}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        lat, lon = location.latitude, location.longitude

        # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å
        tz_name = tf.timezone_at(lng=lon, lat=lat) or "UTC"
        tz = pytz.timezone(tz_name)

        # –õ–æ–∫–∞–ª—å–Ω–∞ –¥–∞—Ç–∞/—á–∞—Å -> UTC –¥–ª—è flatlib
        dt_local = tz.localize(dt.strptime(f"{date} {time}", "%Y-%m-%d %H:%M"))
        dt_utc = dt_local.astimezone(pytz.utc)
        fdate = dt_utc.strftime("%Y/%m/%d")
        ftime = dt_utc.strftime("%H:%M")

        geopos = GeoPos(str(lat), str(lon))
        fdt = Datetime(fdate, ftime, "+00:00")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç—É (Placidus –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        chart = Chart(fdt, geopos)

        # –ú–∞–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ –∫–∞—Ä—Ç—É
        draw_natal_chart(chart, place, filename="chart.png")

    except Exception as e:
        # fallback –∫–∞—Ä—Ç–∏–Ω–∫–∞, —â–æ–± —Ñ—Ä–æ–Ω—Ç –∑–∞–≤–∂–¥–∏ –º–∞–≤ —â–æ –ø–æ–∫–∞–∑–∞—Ç–∏
        status = "stub"
        error_msg = str(e)
        fig, ax = plt.subplots(figsize=(6, 6))
        ax.axis('off')
        ax.text(0.5, 0.55, "–ù–∞—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)", ha='center', va='center', fontsize=14)
        ax.text(0.5, 0.45, place, ha='center', va='center', fontsize=11, color="#666666")
        fig.savefig(chart_path, bbox_inches='tight', pad_inches=0.2)
        plt.close(fig)

    return jsonify({
        "chart_image_url": "/static/chart.png",
        "status": status,
        "error": error_msg
    })

@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory(STATIC_FOLDER, filename)

@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "ok"}), 200

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)